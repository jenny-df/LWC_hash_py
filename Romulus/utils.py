BLOCK_SIZE = 32
DIGEST_LEN = 32
L_R_SIZE = 16

CONST_1 = bytes([1]) + bytes(L_R_SIZE-1)
CONST_2 = bytes([2]) + bytes(L_R_SIZE-1)

SKINNY_ROUNDS = 40
S8 = [0x65, 0x4c, 0x6a, 0x42, 0x4b, 0x63, 0x43, 0x6b, 0x55, 0x75, 0x5a, 0x7a, 0x53, 0x73, 0x5b, 0x7b,
0x35, 0x8c, 0x3a, 0x81, 0x89, 0x33, 0x80, 0x3b, 0x95, 0x25, 0x98, 0x2a, 0x90, 0x23, 0x99, 0x2b,
0xe5, 0xcc, 0xe8, 0xc1, 0xc9, 0xe0, 0xc0, 0xe9, 0xd5, 0xf5, 0xd8, 0xf8, 0xd0, 0xf0, 0xd9, 0xf9,
0xa5, 0x1c, 0xa8, 0x12, 0x1b, 0xa0, 0x13, 0xa9, 0x05, 0xb5, 0x0a, 0xb8, 0x03, 0xb0, 0x0b, 0xb9,
0x32, 0x88, 0x3c, 0x85, 0x8d, 0x34, 0x84, 0x3d, 0x91, 0x22, 0x9c, 0x2c, 0x94, 0x24, 0x9d, 0x2d,
0x62, 0x4a, 0x6c, 0x45, 0x4d, 0x64, 0x44, 0x6d, 0x52, 0x72, 0x5c, 0x7c, 0x54, 0x74, 0x5d, 0x7d,
0xa1, 0x1a, 0xac, 0x15, 0x1d, 0xa4, 0x14, 0xad, 0x02, 0xb1, 0x0c, 0xbc, 0x04, 0xb4, 0x0d, 0xbd,
0xe1, 0xc8, 0xec, 0xc5, 0xcd, 0xe4, 0xc4, 0xed, 0xd1, 0xf1, 0xdc, 0xfc, 0xd4, 0xf4, 0xdd, 0xfd,
0x36, 0x8e, 0x38, 0x82, 0x8b, 0x30, 0x83, 0x39, 0x96, 0x26, 0x9a, 0x28, 0x93, 0x20, 0x9b, 0x29,
0x66, 0x4e, 0x68, 0x41, 0x49, 0x60, 0x40, 0x69, 0x56, 0x76, 0x58, 0x78, 0x50, 0x70, 0x59, 0x79,
0xa6, 0x1e, 0xaa, 0x11, 0x19, 0xa3, 0x10, 0xab, 0x06, 0xb6, 0x08, 0xba, 0x00, 0xb3, 0x09, 0xbb,
0xe6, 0xce, 0xea, 0xc2, 0xcb, 0xe3, 0xc3, 0xeb, 0xd6, 0xf6, 0xda, 0xfa, 0xd3, 0xf3, 0xdb, 0xfb,
0x31, 0x8a, 0x3e, 0x86, 0x8f, 0x37, 0x87, 0x3f, 0x92, 0x21, 0x9e, 0x2e, 0x97, 0x27, 0x9f, 0x2f,
0x61, 0x48, 0x6e, 0x46, 0x4f, 0x67, 0x47, 0x6f, 0x51, 0x71, 0x5e, 0x7e, 0x57, 0x77, 0x5f, 0x7f,
0xa2, 0x18, 0xae, 0x16, 0x1f, 0xa7, 0x17, 0xaf, 0x01, 0xb2, 0x0e, 0xbe, 0x07, 0xb7, 0x0f, 0xbf,
0xe2, 0xca, 0xee, 0xc6, 0xcf, 0xe7, 0xc7, 0xef, 0xd2, 0xf2, 0xde, 0xfe, 0xd7, 0xf7, 0xdf, 0xff]

ROUND_CONSTS = [0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3E, 0x3D, 0x3B, 0x37, 0x2F, 0x1E, 0x3C, 0x39, 0x33, 0x27, 0x0E, 
                0x1D, 0x3A, 0x35, 0x2B, 0x16, 0x2C, 0x18, 0x30, 0x21, 0x02, 0x05, 0x0B, 0x17, 0x2E, 0x1C, 0x38, 
                0x31, 0x23, 0x06, 0x0D, 0x1B, 0x36, 0x2D, 0x1A]

PT = [9, 15, 8, 13, 10, 14, 12, 11, 0, 1, 2, 3, 4, 5, 6, 7]
P = [0, 1, 2, 3, 7, 4, 5, 6, 10, 11, 8, 9, 13, 14, 15, 12]

ONE_BIT_MASK = 0x1
FOUR_BIT_MASK = 0xf
BYTE_MASK = 0xff

def cf(left, right, msg):
    tweakey = right + msg
    left_xored = bytes([c ^ l for c, l in zip(CONST_1, left)])

    tbc_output = TBC_Skinny_128_384_plus(left, tweakey)
    xor_in_place(left, [tbc_output])

    tbc_output = TBC_Skinny_128_384_plus(left_xored, tweakey)
    xor_in_place(right, [right, tbc_output, left_xored])

def ipad(msg, desired_len):
    Z = len(msg) % desired_len
    return msg + bytes(desired_len - Z - 1) + bytes([Z])


def TBC_Skinny_128_384_plus(internal_state, tweakey):
    internal_state = bytearray(internal_state)
    tweakey = bytearray(tweakey)

    for round in range(SKINNY_ROUNDS):
        sub_cells(internal_state)
        add_constants(internal_state, ROUND_CONSTS[round])
        add_round_tweakey(internal_state, tweakey)
        shift_rows(internal_state)
        mix_columns(internal_state)

    return bytes(internal_state)


def sub_cells(internal_state):
    for i, val in enumerate(internal_state):
        internal_state[i] = S8[val]


def add_constants(internal_state, round_const):
    internal_state[0] ^= round_const & FOUR_BIT_MASK
    internal_state[4] ^= (round_const >> 4) & FOUR_BIT_MASK
    internal_state[8] ^= 0x2


def add_round_tweakey(internal_state, tweakey):
    for i in range(8):
        internal_state[i] ^= tweakey[i] ^ tweakey[16+i] ^ tweakey[32+i]
    
    # update tweakey
    tweakey_original = tweakey.copy()
    for i, j in enumerate(PT):
        tweakey[i] = tweakey_original[j]
        tweakey[16+i] = tweakey_original[16+j]
        tweakey[32+i] = tweakey_original[32+j]

    for i in range(8):
        tweakey[16+i] = ((tweakey[16+i] << 1) + (((tweakey[16+i] >> 7) ^ (tweakey[16+i] >> 5)) & ONE_BIT_MASK)) & BYTE_MASK
        tweakey[32+i] = ((tweakey[32+i] >> 1) + ((tweakey[32+i] ^ (tweakey[32+i] >> 6)) << 7)) & BYTE_MASK


def shift_rows(internal_state):
    internal_state_original = internal_state.copy()
    for i, j in enumerate(P):
        internal_state[i] = internal_state_original[j]


def mix_columns(internal_state):
    for i in range(4):
        ith, ith_4, ith_8 = internal_state[i], internal_state[4+i], internal_state[8+i]
        internal_state[i] ^= ith_8 ^ internal_state[12+i]
        internal_state[4+i] = ith
        internal_state[8+i] ^= ith_4
        internal_state[12+i] = ith ^ ith_8

def xor_in_place(original, vals):
    for i, vs in enumerate(zip(*vals)):
        for v in vs:
            original[i] ^= v
